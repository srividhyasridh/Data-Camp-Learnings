SELECT-FROM
-----------------------------------------------------------------------------------

Exercise:
---------
Select the information from the “dept_no” column of the “departments” table.

Select all data from the “departments” table.

Solution:
---------
select dept_no from departments;

select * from departments;

WHERE
-------------------------------------------------------------------------------------

Exercise:
---------
Select all people from the “employees” table whose first name is “Elvis”.

Solution:
---------
select * from employees where first_name='Elvis';

AND
---------------------------------------------------------------------------------------

Exercise:
---------
Retrieve a list with all female employees whose first name is Kellie. 

Solution:
---------
Select * from employees where first_name='Kellie' AND gender='F';

OR
----------------------------------------------------------------------------------------

Exercise:
---------
Retrieve a list with all employees whose first name is either Kellie or Aruna.

Solution:
---------
select * from employees where first_name='Kellie' OR first_name='Aruna';


OPERATORS PRECEDENCE
-------------------------------------------------------------------------------------------

Exercise:
---------
Retrieve a list with all female employees whose first name is either Kellie or Aruna.

Solution:
---------
select * from employees where gender='F' AND (first_name='Kellie' OR first_name='Aruna');

IN-NOT IN
---------------------------------------------------------------------------------------------

Exercise:
---------
Use the IN operator to select all individuals from the “employees” table, whose first name is
 either “Denis”, or “Elvis”.

Extract all records from the ‘employees’ table, aside from those with employees named John, Mark, or Jacob.

Solution:
--------
select * from employees where first_name IN ('Denis','Elvis');

select * from employees where first_name NOT IN ('John','Mark','Jacob');


LIKE-NOT LIKE
----------------------------------------------------------------------------------------------

Exercise:
---------
Working with the “employees” table, use the LIKE operator to select the data about all individuals, 
whose first name starts with “Mark”; 
specify that the name can be succeeded by any sequence of characters.

Retrieve a list with all employees who have been hired in the year 2000.

Retrieve a list with all employees whose employee number is written with 5 characters, and starts with “1000”. 

Solution:
---------
select * from employees where first_name like ('Mar%');

select * from employees where hire_date like '%2000%';

select * from employees where emp_no like '1000_';


WildCard Characters
------------------------------------------------------------------------------------------------

Exercise:
---------
Extract all individuals from the ‘employees’ table whose first name contains “Jack”.

Once you have done that, extract another list containing the names of employees that do not contain “Jack”.

Solution:
---------
select * from employees where first_name like '%Jack%';

select * from employees where first_name not like '%Jack%';

BETWEEN...AND
--------------------------------------------------------------------------------------------------

Exercise:
---------
Select all the information from the “salaries” table regarding contracts from 66,000 to 70,000 dollars per year.

Retrieve a list with all individuals whose employee number is not between ‘10004’ and ‘10012’.

Select the names of all departments with numbers between ‘d003’ and ‘d006’.

Solution:
---------
select * from salaries where salary BETWEEN 66000 AND 70000;

select * from employees where emp_no NOT BETWEEN 10004 AND 10012;---check '' dbt

select dept_name from departments where dept_no BETWEEN 'd003' AND 'd006';


IS NOT NULL-IS NULL:
----------------------------------------------------------------------------------------------------

Exercise:
--------
Select the names of all departments whose department number value is not null.

Solution:
---------
select dept_name from departments where dept_no IS NOT NULL;

Other Comparison operators:
----------------------------------------------------------------------------------------------------

Exercise:
---------
Retrieve a list with data about all female employees who were hired in the year 2000 or after.

Hint: If you solve the task correctly, SQL should return 7 rows.

Extract a list with all employees’ salaries higher than $150,000 per annum.

Solution:
---------
select * from employees where gender='F' and hire_date >= '2000-01-01';

select salary from salaries where salary > 150000;


SELECT DISTINCT
--------------------------------------------------------------------------------------------------------

Exercise:
---------
Obtain a list with all different “hire dates” from the “employees” table.

Expand this list and click on “Limit to 1000 rows”. 
This way you will set the limit of output rows displayed back to the default of 1000.

In the next lecture, we will show you how to manipulate the limit rows count. 

Solution:
---------
Select distinct hire_date from employees;


AGGREGATE FUNCTIONS:
---------------------------------------------------------------------------------------------------------

Exercise:
---------
How many annual contracts with a value higher than or equal to $100,000 have been registered in the salaries table?

How many managers do we have in the “employees” database? Use the star symbol (*) in your code to solve this exercise.

Solution:
---------
select count(*) from salaries where salary >= 100000;

select count(*) from dept_manager;

ORDER BY:
------------------------------------------------------------------------------------------------------------

Exercise:
---------
Select all data from the “employees” table, ordering it by “hire date” in descending order.

Solution:
---------
select * from employees order by hire_date DESC;

AS
-------------------------------------------------------------------------------------------------------------

Exercise:
---------
Write a query that obtains two columns. 
The first column must contain annual salaries higher than 80,000 dollars. 
The second column, renamed to “emps_with_same_salary”, must show the number of employees contracted to that salary. 
Lastly, sort the output by the first column.

Solution:
---------
select salary, count(emp_no) as emps_with_same_salary
from salaries where salary > 80000 
group by salary
order by salary;

---dbt GroupBy, OrderBy, Distinct

HAVING
--------------------------------------------------------------------------------------------------------------

Exercise:
---------
Select all employees whose average salary is higher than $120,000 per annum.

Hint: You should obtain 101 records.

Compare the output you obtained with the output of the following two queries:

SELECT *, AVG(salary) FROM salaries
WHERE salary > 120000
GROUP BY emp_no
ORDER BY emp_no;

SELECT *, AVG(salary) FROM salaries
GROUP BY emp_no
HAVING AVG(salary) > 120000;

Solution:
---------
select emp_no, AVG(salary) from salaries 
Group By emp_no
Having AVG(salary) > 120000
Order By emp_no;

DIFF B/W WHERE AND HAVING
--------------------------------------------------------------------------------------------------------------
Exercise:
--------
Select the employee numbers of all individuals who have signed more than 1 contract after the 1st of January 2000.

Hint: To solve this exercise, use the “dept_emp” table.


Solution:
---------
select emp_no from dept_emp 
where from_date > '2000-01-01'
group by emp_no
having count(from_date) >1
order by emp_no;

LIMIT
----------------------------------------------------------------------------------------------------------------
Exercise:
---------
Select the first 100 rows from the ‘dept_emp’ table. 

Solution:
---------
select * from dept_emp
//order by emp_no
limit 100;
















































